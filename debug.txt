============================= test session starts =============================
platform win32 -- Python 3.13.3, pytest-8.4.1, pluggy-1.6.0 -- D:\ai_coding\CS336\assignment1-basics-main\.venv\Scripts\python.exe
cachedir: .pytest_cache
rootdir: D:\ai_coding\CS336\assignment1-basics-main
configfile: pyproject.toml
plugins: jaxtyping-0.3.2
collecting ... collected 1 item

tests/test_model.py::test_transformer_lm FAILED

================================== FAILURES ===================================
_____________________________ test_transformer_lm _____________________________

numpy_snapshot = <tests.conftest.NumpySnapshot object at 0x000002011A3742F0>
vocab_size = 10000, n_keys = 16, d_model = 64, n_layers = 3, n_heads = 4
d_ff = 128, theta = 10000.0
ts_state_dict = ({'layers.0.attn.k_proj.weight': tensor([[ 0.0890,  0.1049,  0.0980,  ...,  0.1314,  0.0594, -0.0206],
        [ 0.027...7,  ...,  0.0380, -0.0240,  0.1170]]), ...}, {'context_length': 16, 'd_ff': 128, 'd_model': 64, 'ffn_type': None, ...})
in_indices = tensor([[5130, 8761, 2403, 3492, 2234, 1437, 5647, 7786, 1904, 6558, 9177, 7649],
        [8235, 4285, 4217, 5482, 574... 861, 9322, 4143, 1833, 4502, 2050],
        [ 907, 5061, 9813, 7793, 6212, 7893, 3454, 8112, 6322, 2511, 2434, 6879]])

    def test_transformer_lm(
        numpy_snapshot, vocab_size, n_keys, d_model, n_layers, n_heads, d_ff, theta, ts_state_dict, in_indices
    ):
        state_dict, _ = ts_state_dict
    
        actual_output = run_transformer_lm(
            vocab_size=vocab_size,
            context_length=n_keys,
            d_model=d_model,
            num_layers=n_layers,
            num_heads=n_heads,
            d_ff=d_ff,
            rope_theta=theta,
            weights=state_dict,
            in_indices=in_indices,
        )
>       numpy_snapshot.assert_match(actual_output, atol=1e-4, rtol=1e-2)

tests\test_model.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <tests.conftest.NumpySnapshot object at 0x000002011A3742F0>
actual = tensor([[[ -0.5342,   4.0176,  -0.1415,  ...,  -4.6717,  -4.5737,  -5.6433],
         [ -0.7428,   4.1257,   0.3543,  ...],
         [ -1.3407,   1.8222,   0.5550,  ...,  -6.1033,  -4.1266,  -6.5024]]],
       grad_fn=<UnsafeViewBackward0>)
rtol = 0.01, atol = 0.0001, test_name = 'test_transformer_lm'
force_update = False

    def assert_match(
        self,
        actual: _A | dict[str, _A],
        rtol: float = 1e-4,
        atol: float = 1e-2,
        test_name: str | type[DEFAULT] = DEFAULT,
        force_update: bool | type[DEFAULT] = DEFAULT,
    ):
        """
        Assert that the actual array(s) matches the snapshot.
    
        Args:
            actual: Single NumPy array or dictionary of named arrays
            test_name: The name of the test (used for the snapshot file)
            update: If True, update the snapshot instead of comparing
        """
        if force_update is DEFAULT:
            force_update = self.default_force_update
        if self.always_match_exact:
            rtol = atol = 0
        if test_name is DEFAULT:
            assert self.default_test_name is not None, "Test name must be provided or set as default"
            test_name = self.default_test_name
    
        snapshot_path = self._get_snapshot_path(test_name)
    
        # Convert single array to dictionary for consistent handling
        arrays_dict = actual if isinstance(actual, dict) else {"array": actual}
        arrays_dict = {k: _canonicalize_array(v) for k, v in arrays_dict.items()}
    
        # Load the snapshot
        expected_arrays = dict(np.load(snapshot_path))
    
        # Verify all expected arrays are present
        missing_keys = set(arrays_dict.keys()) - set(expected_arrays.keys())
        if missing_keys:
            raise AssertionError(f"Keys {missing_keys} not found in snapshot for {test_name}")
    
        # Verify all actual arrays are expected
        extra_keys = set(expected_arrays.keys()) - set(arrays_dict.keys())
        if extra_keys:
            raise AssertionError(f"Snapshot contains extra keys {extra_keys} for {test_name}")
    
        # Compare all arrays
        for key in arrays_dict:
>           np.testing.assert_allclose(
                _canonicalize_array(arrays_dict[key]),
                expected_arrays[key],
                rtol=rtol,
                atol=atol,
                err_msg=f"Array '{key}' does not match snapshot for {test_name}",
            )
E           AssertionError: 
E           Not equal to tolerance rtol=0.01, atol=0.0001
E           Array 'array' does not match snapshot for test_transformer_lm
E           Mismatched elements: 467961 / 480000 (97.5%)
E           Max absolute difference among violations: 6.883136
E           Max relative difference among violations: 14884.118
E            ACTUAL: array([[[ -0.534216,   4.01759 ,  -0.141526, ...,  -4.671677,
E                     -4.573658,  -5.643297],
E                   [ -0.742836,   4.12567 ,   0.354315, ...,  -7.225794,...
E            DESIRED: array([[[ -2.785665,   3.587132,   0.285842, ...,  -6.533192,
E                     -6.18881 ,  -7.657421],
E                   [ -2.290899,   4.14432 ,   0.279644, ...,  -3.832705,...

tests\conftest.py:89: AssertionError
============================== warnings summary ===============================
tests\adapters.py:334
  D:\ai_coding\CS336\assignment1-basics-main\tests\adapters.py:334: SyntaxWarning: invalid escape sequence '\T'
    rope_theta (float): The RoPE $\Theta$ parameter.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
FAILED tests/test_model.py::test_transformer_lm - AssertionError: 
======================== 1 failed, 1 warning in 1.69s =========================
